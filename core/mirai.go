// Generated by hand. Please do not modify at will!
// For type explanations, please refer to https://docs.mirai.mamoe.net/mirai-api-http/api/EventType.html
// and https://docs.mirai.mamoe.net/mirai-api-http/api/MessageType.html (for message types only).
// TODO: Generated by code.

package core

import (
	"encoding/json"
	"errors"
	"fmt"
)

/* Event Types */

type Event interface {
	EventType() string
}

func ParseEvent(data []byte) (Event, error) {
	var rawEvent map[string]interface{}
	if err := json.Unmarshal(data, &rawEvent); err != nil {
		return nil, err
	}

	eventType, ok := rawEvent["type"].(string)
	if !ok {
		// TODO: handle unknown events
		return nil, errors.New("event type not found or not a string")
	}

	var event Event
	switch eventType {
	case "BotOnlineEvent":
		event = &BotOnlineEvent{}
	case "BotOfflineEventActive":
		event = &BotOfflineEventActive{}
	case "BotOfflineEventForce":
		event = &BotOfflineEventForce{}
	case "BotOfflineEventDropped":
		event = &BotOfflineEventDropped{}
	case "BotReloginEvent":
		event = &BotReloginEvent{}
	case "FriendInputStatusChangedEvent":
		event = &FriendInputStatusChangedEvent{}
	case "FriendNickChangedEvent":
		event = &FriendNickChangedEvent{}
	case "FriendAddEvent":
		event = &FriendAddEvent{}
	case "FriendDeleteEvent":
		event = &FriendDeleteEvent{}
	case "BotGroupPermissionChangeEvent":
		event = &BotGroupPermissionChangeEvent{}
	case "BotMuteEvent":
		event = &BotMuteEvent{}
	case "BotUnmuteEvent":
		event = &BotUnmuteEvent{}
	case "BotJoinGroupEvent":
		event = &BotJoinGroupEvent{}
	case "BotLeaveEventActive":
		event = &BotLeaveEventActive{}
	case "BotLeaveEventKick":
		event = &BotLeaveEventKick{}
	case "BotLeaveEventDisband":
		event = &BotLeaveEventDisband{}
	case "GroupRecallEvent":
		event = &GroupRecallEvent{}
	case "FriendRecallEvent":
		event = &FriendRecallEvent{}
	case "NudgeEvent":
		event = &NudgeEvent{}
	case "GroupNameChangeEvent":
		event = &GroupNameChangeEvent{}
	case "GroupMuteAllEvent":
		event = &GroupMuteAllEvent{}
	case "GroupAllowAnonymousChatEvent":
		event = &GroupAllowAnonymousChatEvent{}
	case "GroupAllowConfessTalkEvent":
		event = &GroupAllowConfessTalkEvent{}
	case "GroupAllowMemberInviteEvent":
		event = &GroupAllowMemberInviteEvent{}
	case "MemberJoinEvent":
		event = &MemberJoinEvent{}
	case "MemberLeaveEventKick":
		event = &MemberLeaveEventKick{}
	case "MemberLeaveEventQuit":
		event = &MemberLeaveEventQuit{}
	case "MemberCardChangeEvent":
		event = &MemberCardChangeEvent{}
	case "MemberSpecialTitleChangeEvent":
		event = &MemberSpecialTitleChangeEvent{}
	case "MemberPermissionChangeEvent":
		event = &MemberPermissionChangeEvent{}
	case "MemberMuteEvent":
		event = &MemberMuteEvent{}
	case "MemberUnmuteEvent":
		event = &MemberUnmuteEvent{}
	case "MemberHonorChangeEvent":
		event = &MemberHonorChangeEvent{}
	case "NewFriendRequestEvent":
		event = &NewFriendRequestEvent{}
	case "MemberJoinRequestEvent":
		event = &MemberJoinRequestEvent{}
	case "BotInvitedJoinGroupRequestEvent":
		event = &BotInvitedJoinGroupRequestEvent{}
	case "OtherClientOnlineEvent":
		event = &OtherClientOnlineEvent{}
	case "OtherClientOfflineEvent":
		event = &OtherClientOfflineEvent{}
	case "CommandExecutedEvent":
		event = &CommandExecutedEvent{}
	case "FriendMessage":
		event = &FriendMessage{}
	case "GroupMessage":
		event = &GroupMessage{}
	case "TempMessage":
		event = &TempMessage{}
	case "StrangerMessage":
		event = &StrangerMessage{}
	case "OtherClientMessage":
		event = &OtherClientMessage{}
	case "FriendSyncMessage":
		event = &FriendSyncMessage{}
	case "GroupSyncMessage":
		event = &GroupSyncMessage{}
	case "TempSyncMessage":
		event = &TempSyncMessage{}
	case "StrangerSyncMessage":
		event = &StrangerSyncMessage{}
	default:
		// TODO: handle unknown events
		return nil, fmt.Errorf("unknown event type: %s", eventType)
	}

	eventJson, err := json.Marshal(rawEvent)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal(eventJson, event); err != nil {
		return nil, err
	}

	return event, nil
}

type BotOnlineEvent struct {
	Type string `json:"type"`
	QQ   int    `json:"QQ"`
}

func (b BotOnlineEvent) EventType() string { return b.Type }

type BotOfflineEventActive struct {
	Type string `json:"type"`
	QQ   int    `json:"QQ"`
}

func (b BotOfflineEventActive) EventType() string { return b.Type }

type BotOfflineEventForce struct {
	Type string `json:"type"`
	QQ   int    `json:"QQ"`
}

func (b BotOfflineEventForce) EventType() string { return b.Type }

type BotOfflineEventDropped struct {
	Type string `json:"type"`
	QQ   int    `json:"QQ"`
}

func (b BotOfflineEventDropped) EventType() string { return b.Type }

type BotReloginEvent struct {
	Type string `json:"type"`
	QQ   int    `json:"QQ"`
}

func (b BotReloginEvent) EventType() string { return b.Type }

type FriendInputStatusChangedEvent struct {
	Type   string `json:"type"`
	Friend struct {
		ID       int    `json:"id"`
		Nickname string `json:"nickname"`
		Remark   string `json:"remark"`
	} `json:"friend"`
	Inputting bool `json:"inputting"`
}

func (f FriendInputStatusChangedEvent) EventType() string { return f.Type }

type FriendNickChangedEvent struct {
	Type   string `json:"type"`
	Friend struct {
		ID       int    `json:"id"`
		Nickname string `json:"nickname"`
		Remark   string `json:"remark"`
	} `json:"friend"`
	From string `json:"from"`
	To   string `json:"to"`
}

func (f FriendNickChangedEvent) EventType() string { return f.Type }

type FriendAddEvent struct {
	Type   string `json:"type"`
	Friend struct {
		ID       int    `json:"id"`
		Nickname string `json:"nickname"`
		Remark   string `json:"remark"`
	} `json:"friend"`
	Stranger bool `json:"stranger"`
}

func (f FriendAddEvent) EventType() string { return f.Type }

type FriendDeleteEvent struct {
	Type   string `json:"type"`
	Friend struct {
		ID       int    `json:"id"`
		Nickname string `json:"nickname"`
		Remark   string `json:"remark"`
	} `json:"friend"`
}

func (f FriendDeleteEvent) EventType() string { return f.Type }

type BotGroupPermissionChangeEvent struct {
	Type    string `json:"type"`
	Origin  string `json:"origin"`
	Current string `json:"current"`
	Group   struct {
		ID         int    `json:"id"`
		Name       string `json:"name"`
		Permission string `json:"permission"`
	} `json:"group"`
}

func (b BotGroupPermissionChangeEvent) EventType() string { return b.Type }

type BotMuteEvent struct {
	Type            string `json:"type"`
	DurationSeconds int    `json:"durationSeconds"`
	Operator        struct {
		ID                 int    `json:"id"`
		MemberName         string `json:"memberName"`
		Permission         string `json:"permission"`
		SpecialTitle       string `json:"specialTitle"`
		JoinTimestamp      int    `json:"joinTimestamp"`
		LastSpeakTimestamp int    `json:"lastSpeakTimestamp"`
		MuteTimeRemaining  int    `json:"muteTimeRemaining"`
		Group              struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"operator"`
}

func (b BotMuteEvent) EventType() string { return b.Type }

type BotUnmuteEvent struct {
	Type     string `json:"type"`
	Operator struct {
		ID                 int    `json:"id"`
		MemberName         string `json:"memberName"`
		Permission         string `json:"permission"`
		SpecialTitle       string `json:"specialTitle"`
		JoinTimestamp      int    `json:"joinTimestamp"`
		LastSpeakTimestamp int    `json:"lastSpeakTimestamp"`
		MuteTimeRemaining  int    `json:"muteTimeRemaining"`
		Group              struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"operator"`
}

func (b BotUnmuteEvent) EventType() string { return b.Type }

type BotJoinGroupEvent struct {
	Type  string `json:"type"`
	Group struct {
		ID         int    `json:"id"`
		Name       string `json:"name"`
		Permission string `json:"permission"`
	} `json:"group"`
	Invitor interface{} `json:"invitor"`
}

func (b BotJoinGroupEvent) EventType() string { return b.Type }

type BotLeaveEventActive struct {
	Type  string `json:"type"`
	Group struct {
		ID         int    `json:"id"`
		Name       string `json:"name"`
		Permission string `json:"permission"`
	} `json:"group"`
}

func (b BotLeaveEventActive) EventType() string { return b.Type }

type BotLeaveEventKick struct {
	Type  string `json:"type"`
	Group struct {
		ID         int    `json:"id"`
		Name       string `json:"name"`
		Permission string `json:"permission"`
	} `json:"group"`
	Operator interface{} `json:"operator"`
}

func (b BotLeaveEventKick) EventType() string { return b.Type }

type BotLeaveEventDisband struct {
	Type  string `json:"type"`
	Group struct {
		ID         int    `json:"id"`
		Name       string `json:"name"`
		Permission string `json:"permission"`
	} `json:"group"`
	Operator interface{} `json:"operator"`
}

func (b BotLeaveEventDisband) EventType() string { return b.Type }

type GroupRecallEvent struct {
	Type      string `json:"type"`
	AuthorID  int    `json:"authorId"`
	MessageID int    `json:"messageId"`
	Time      int    `json:"time"`
	Group     struct {
		ID         int    `json:"id"`
		Name       string `json:"name"`
		Permission string `json:"permission"`
	} `json:"group"`
	Operator struct {
		ID                 int    `json:"id"`
		MemberName         string `json:"memberName"`
		Permission         string `json:"permission"`
		SpecialTitle       string `json:"specialTitle"`
		JoinTimestamp      int    `json:"joinTimestamp"`
		LastSpeakTimestamp int    `json:"lastSpeakTimestamp"`
		MuteTimeRemaining  int    `json:"muteTimeRemaining"`
		Group              struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"operator"`
}

func (g GroupRecallEvent) EventType() string { return g.Type }

type FriendRecallEvent struct {
	Type      string `json:"type"`
	AuthorID  int    `json:"authorId"`
	MessageID int    `json:"messageId"`
	Time      int    `json:"time"`
	Operator  int    `json:"operator"`
}

func (f FriendRecallEvent) EventType() string { return f.Type }

type NudgeEvent struct {
	Type    string `json:"type"`
	FromID  int    `json:"fromId"`
	Subject struct {
		ID   int    `json:"id"`
		Kind string `json:"kind"`
	} `json:"subject"`
	Action string `json:"action"`
	Suffix string `json:"suffix"`
	Target int    `json:"target"`
}

func (n NudgeEvent) EventType() string { return n.Type }

type GroupNameChangeEvent struct {
	Type    string `json:"type"`
	Origin  string `json:"origin"`
	Current string `json:"current"`
	Group   struct {
		ID         int    `json:"id"`
		Name       string `json:"name"`
		Permission string `json:"permission"`
	} `json:"group"`
	Operator struct {
		ID                 int    `json:"id"`
		MemberName         string `json:"memberName"`
		Permission         string `json:"permission"`
		SpecialTitle       string `json:"specialTitle"`
		JoinTimestamp      int    `json:"joinTimestamp"`
		LastSpeakTimestamp int    `json:"lastSpeakTimestamp"`
		MuteTimeRemaining  int    `json:"muteTimeRemaining"`
		Group              struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"operator"`
}

func (g GroupNameChangeEvent) EventType() string { return g.Type }

type GroupMuteAllEvent struct {
	Type    string `json:"type"`
	Origin  bool   `json:"origin"`
	Current bool   `json:"current"`
	Group   struct {
		ID         int    `json:"id"`
		Name       string `json:"name"`
		Permission string `json:"permission"`
	} `json:"group"`
	Operator struct {
		ID                 int    `json:"id"`
		MemberName         string `json:"memberName"`
		SpecialTitle       string `json:"specialTitle"`
		Permission         string `json:"permission"`
		JoinTimestamp      int    `json:"joinTimestamp"`
		LastSpeakTimestamp int    `json:"lastSpeakTimestamp"`
		MuteTimeRemaining  int    `json:"muteTimeRemaining"`
		Group              struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"operator"`
}

func (g GroupMuteAllEvent) EventType() string { return g.Type }

type GroupAllowAnonymousChatEvent struct {
	Type    string `json:"type"`
	Origin  bool   `json:"origin"`
	Current bool   `json:"current"`
	Group   struct {
		ID         int    `json:"id"`
		Name       string `json:"name"`
		Permission string `json:"permission"`
	} `json:"group"`
	Operator struct {
		ID                 int    `json:"id"`
		MemberName         string `json:"memberName"`
		SpecialTitle       string `json:"specialTitle"`
		Permission         string `json:"permission"`
		JoinTimestamp      int    `json:"joinTimestamp"`
		LastSpeakTimestamp int    `json:"lastSpeakTimestamp"`
		MuteTimeRemaining  int    `json:"muteTimeRemaining"`
		Group              struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"operator"`
}

func (g GroupAllowAnonymousChatEvent) EventType() string { return g.Type }

type GroupAllowConfessTalkEvent struct {
	Type    string `json:"type"`
	Origin  bool   `json:"origin"`
	Current bool   `json:"current"`
	Group   struct {
		ID         int    `json:"id"`
		Name       string `json:"name"`
		Permission string `json:"permission"`
	} `json:"group"`
	IsByBot bool `json:"isByBot"`
}

func (g GroupAllowConfessTalkEvent) EventType() string { return g.Type }

type GroupAllowMemberInviteEvent struct {
	Type    string `json:"type"`
	Origin  bool   `json:"origin"`
	Current bool   `json:"current"`
	Group   struct {
		ID         int    `json:"id"`
		Name       string `json:"name"`
		Permission string `json:"permission"`
	} `json:"group"`
	Operator struct {
		ID                 int    `json:"id"`
		MemberName         string `json:"memberName"`
		SpecialTitle       string `json:"specialTitle"`
		Permission         string `json:"permission"`
		JoinTimestamp      int    `json:"joinTimestamp"`
		LastSpeakTimestamp int    `json:"lastSpeakTimestamp"`
		MuteTimeRemaining  int    `json:"muteTimeRemaining"`
		Group              struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"operator"`
}

func (g GroupAllowMemberInviteEvent) EventType() string { return g.Type }

type MemberJoinEvent struct {
	Type   string `json:"type"`
	Member struct {
		ID                 int    `json:"id"`
		MemberName         string `json:"memberName"`
		SpecialTitle       string `json:"specialTitle"`
		Permission         string `json:"permission"`
		JoinTimestamp      int    `json:"joinTimestamp"`
		LastSpeakTimestamp int    `json:"lastSpeakTimestamp"`
		MuteTimeRemaining  int    `json:"muteTimeRemaining"`
		Group              struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"member"`
	Invitor interface{} `json:"invitor"`
}

func (m MemberJoinEvent) EventType() string { return m.Type }

type MemberLeaveEventKick struct {
	Type   string `json:"type"`
	Member struct {
		ID                 int    `json:"id"`
		MemberName         string `json:"memberName"`
		SpecialTitle       string `json:"specialTitle"`
		Permission         string `json:"permission"`
		JoinTimestamp      int    `json:"joinTimestamp"`
		LastSpeakTimestamp int    `json:"lastSpeakTimestamp"`
		MuteTimeRemaining  int    `json:"muteTimeRemaining"`
		Group              struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"member"`
	Operator struct {
		ID                 int    `json:"id"`
		MemberName         string `json:"memberName"`
		SpecialTitle       string `json:"specialTitle"`
		Permission         string `json:"permission"`
		JoinTimestamp      int    `json:"joinTimestamp"`
		LastSpeakTimestamp int    `json:"lastSpeakTimestamp"`
		MuteTimeRemaining  int    `json:"muteTimeRemaining"`
		Group              struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"operator"`
}

func (m MemberLeaveEventKick) EventType() string { return m.Type }

type MemberLeaveEventQuit struct {
	Type   string `json:"type"`
	Member struct {
		ID         int    `json:"id"`
		MemberName string `json:"memberName"`
		Permission string `json:"permission"`
		Group      struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"member"`
}

func (m MemberLeaveEventQuit) EventType() string { return m.Type }

type MemberCardChangeEvent struct {
	Type    string `json:"type"`
	Origin  string `json:"origin"`
	Current string `json:"current"`
	Member  struct {
		ID                 int    `json:"id"`
		MemberName         string `json:"memberName"`
		SpecialTitle       string `json:"specialTitle"`
		Permission         string `json:"permission"`
		JoinTimestamp      int    `json:"joinTimestamp"`
		LastSpeakTimestamp int    `json:"lastSpeakTimestamp"`
		MuteTimeRemaining  int    `json:"muteTimeRemaining"`
		Group              struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"member"`
}

func (m MemberCardChangeEvent) EventType() string { return m.Type }

type MemberSpecialTitleChangeEvent struct {
	Type    string `json:"type"`
	Origin  string `json:"origin"`
	Current string `json:"current"`
	Member  struct {
		ID         int    `json:"id"`
		MemberName string `json:"memberName"`
		Permission string `json:"permission"`
		Group      struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"member"`
}

func (m MemberSpecialTitleChangeEvent) EventType() string { return m.Type }

type MemberPermissionChangeEvent struct {
	Type    string `json:"type"`
	Origin  string `json:"origin"`
	Current string `json:"current"`
	Member  struct {
		ID         int    `json:"id"`
		MemberName string `json:"memberName"`
		Permission string `json:"permission"`
		Group      struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"member"`
}

func (m MemberPermissionChangeEvent) EventType() string { return m.Type }

type MemberMuteEvent struct {
	Type            string `json:"type"`
	DurationSeconds int    `json:"durationSeconds"`
	Member          struct {
		ID                 int    `json:"id"`
		MemberName         string `json:"memberName"`
		SpecialTitle       string `json:"specialTitle"`
		Permission         string `json:"permission"`
		JoinTimestamp      int    `json:"joinTimestamp"`
		LastSpeakTimestamp int    `json:"lastSpeakTimestamp"`
		MuteTimeRemaining  int    `json:"muteTimeRemaining"`
		Group              struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"member"`
	Operator struct {
		ID                 int    `json:"id"`
		MemberName         string `json:"memberName"`
		SpecialTitle       string `json:"specialTitle"`
		Permission         string `json:"permission"`
		JoinTimestamp      int    `json:"joinTimestamp"`
		LastSpeakTimestamp int    `json:"lastSpeakTimestamp"`
		MuteTimeRemaining  int    `json:"muteTimeRemaining"`
		Group              struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"operator"`
}

func (m MemberMuteEvent) EventType() string { return m.Type }

type MemberUnmuteEvent struct {
	Type   string `json:"type"`
	Member struct {
		ID                 int    `json:"id"`
		MemberName         string `json:"memberName"`
		SpecialTitle       string `json:"specialTitle"`
		Permission         string `json:"permission"`
		JoinTimestamp      int    `json:"joinTimestamp"`
		LastSpeakTimestamp int    `json:"lastSpeakTimestamp"`
		MuteTimeRemaining  int    `json:"muteTimeRemaining"`
		Group              struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"member"`
	Operator struct {
		ID                 int    `json:"id"`
		MemberName         string `json:"memberName"`
		SpecialTitle       string `json:"specialTitle"`
		Permission         string `json:"permission"`
		JoinTimestamp      int    `json:"joinTimestamp"`
		LastSpeakTimestamp int    `json:"lastSpeakTimestamp"`
		MuteTimeRemaining  int    `json:"muteTimeRemaining"`
		Group              struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"operator"`
}

func (m MemberUnmuteEvent) EventType() string { return m.Type }

type MemberHonorChangeEvent struct {
	Type   string `json:"type"`
	Member struct {
		ID                 int    `json:"id"`
		MemberName         string `json:"memberName"`
		SpecialTitle       string `json:"specialTitle"`
		Permission         string `json:"permission"`
		JoinTimestamp      int    `json:"joinTimestamp"`
		LastSpeakTimestamp int    `json:"lastSpeakTimestamp"`
		MuteTimeRemaining  int    `json:"muteTimeRemaining"`
		Group              struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"member"`
	Action string `json:"action"`
	Honor  string `json:"honor"`
}

func (m MemberHonorChangeEvent) EventType() string { return m.Type }

type NewFriendRequestEvent struct {
	Type    string `json:"type"`
	EventID int    `json:"eventId"`
	FromID  int    `json:"fromId"`
	GroupID int    `json:"groupId"`
	Nick    string `json:"nick"`
	Message string `json:"message"`
}

func (n NewFriendRequestEvent) EventType() string { return n.Type }

type MemberJoinRequestEvent struct {
	Type      string      `json:"type"`
	EventID   int         `json:"eventId"`
	FromID    int         `json:"fromId"`
	GroupID   int         `json:"groupId"`
	GroupName string      `json:"groupName"`
	Nick      string      `json:"nick"`
	Message   string      `json:"message"`
	InvitorID interface{} `json:"invitorId"`
}

func (m MemberJoinRequestEvent) EventType() string { return m.Type }

type BotInvitedJoinGroupRequestEvent struct {
	Type      string `json:"type"`
	EventID   int    `json:"eventId"`
	FromID    int    `json:"fromId"`
	GroupID   int    `json:"groupId"`
	GroupName string `json:"groupName"`
	Nick      string `json:"nick"`
	Message   string `json:"message"`
}

func (b BotInvitedJoinGroupRequestEvent) EventType() string { return b.Type }

type OtherClientOnlineEvent struct {
	Type   string `json:"type"`
	Client struct {
		ID       int    `json:"id"`
		Platform string `json:"platform"`
	} `json:"client"`
	Kind int `json:"kind"`
}

func (o OtherClientOnlineEvent) EventType() string { return o.Type }

type OtherClientOfflineEvent struct {
	Type   string `json:"type"`
	Client struct {
		ID       int    `json:"id"`
		Platform string `json:"platform"`
	} `json:"client"`
}

func (o OtherClientOfflineEvent) EventType() string { return o.Type }

type CommandExecutedEvent struct {
	Type   string      `json:"type"`
	Name   string      `json:"name"`
	Friend interface{} `json:"friend"`
	Member interface{} `json:"member"`
	Args   []struct {
		Type string `json:"type"`
		Text string `json:"text"`
	} `json:"args"`
}

func (c CommandExecutedEvent) EventType() string { return c.Type }

/* Message Chain Types */

type MessageChain []MessageComponent

func (chain *MessageChain) UnmarshalJSON(data []byte) error {
	var temp []map[string]interface{}

	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}

	for _, item := range temp {
		componentType, ok := item["type"].(string)
		if !ok {
			continue // TODO: handle unknown types
		}

		var comp MessageComponent
		switch componentType {
		case "Source":
			comp = &Source{}
		case "Quote":
			comp = &Quote{}
		case "At":
			comp = &At{}
		case "AtAll":
			comp = &AtAll{}
		case "Face":
			comp = &Face{}
		case "Plain":
			comp = &Plain{}
		case "Image":
			comp = &Image{}
		case "FlashImage":
			comp = &FlashImage{}
		case "Voice":
			comp = &Voice{}
		case "XML":
			comp = &XML{}
		case "JSON":
			comp = &JSON{}
		case "APP":
			comp = &APP{}
		case "Poke":
			comp = &Poke{}
		case "Dice":
			comp = &Dice{}
		case "MarketFace":
			comp = &MarketFace{}
		case "MusicShare":
			comp = &MusicShare{}
		case "Forward":
			comp = &ForwardMessage{}
		case "File":
			comp = &File{}
		case "ShortVideo":
			comp = &ShortVideo{}
		case "MiraiCode":
			comp = &MiraiCode{}
		default:
			// TODO: Handle unknown types, possibly with an error or logging
			continue
		}

		componentData, err := json.Marshal(item)
		if err != nil {
			return err
		}

		if err := json.Unmarshal(componentData, comp); err != nil {
			return err
		}

		*chain = append(*chain, comp)
	}

	return nil
}

type FriendMessage struct {
	Type   string `json:"type"`
	Sender struct {
		ID       int    `json:"id"`
		Nickname string `json:"nickname"`
		Remark   string `json:"remark"`
	} `json:"sender"`
	MessageChain MessageChain `json:"messageChain"`
}

func (f FriendMessage) EventType() string { return f.Type }

type GroupMessage struct {
	Type   string `json:"type"`
	Sender struct {
		ID                 int    `json:"id"`
		MemberName         string `json:"memberName"`
		SpecialTitle       string `json:"specialTitle"`
		Permission         string `json:"permission"`
		JoinTimestamp      int    `json:"joinTimestamp"`
		LastSpeakTimestamp int    `json:"lastSpeakTimestamp"`
		MuteTimeRemaining  int    `json:"muteTimeRemaining"`
		Group              struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"sender"`
	MessageChain MessageChain `json:"messageChain"`
}

func (g GroupMessage) EventType() string { return g.Type }

type TempMessage struct {
	Type   string `json:"type"`
	Sender struct {
		ID                 int    `json:"id"`
		MemberName         string `json:"memberName"`
		SpecialTitle       string `json:"specialTitle"`
		Permission         string `json:"permission"`
		JoinTimestamp      int    `json:"joinTimestamp"`
		LastSpeakTimestamp int    `json:"lastSpeakTimestamp"`
		MuteTimeRemaining  int    `json:"muteTimeRemaining"`
		Group              struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"sender"`
	MessageChain MessageChain `json:"messageChain"`
}

func (t TempMessage) EventType() string { return t.Type }

type StrangerMessage struct {
	Type   string `json:"type"`
	Sender struct {
		ID       int    `json:"id"`
		Nickname string `json:"nickname"`
		Remark   string `json:"remark"`
	} `json:"sender"`
	MessageChain MessageChain `json:"messageChain"`
}

func (s StrangerMessage) EventType() string { return s.Type }

type OtherClientMessage struct {
	Type   string `json:"type"`
	Sender struct {
		ID       int    `json:"id"`
		Platform string `json:"platform"`
	} `json:"sender"`
	MessageChain MessageChain `json:"messageChain"`
}

func (o OtherClientMessage) EventType() string { return o.Type }

type FriendSyncMessage struct {
	Type    string `json:"type"`
	Subject struct {
		ID       int    `json:"id"`
		Nickname string `json:"nickname"`
		Remark   string `json:"remark"`
	} `json:"subject"`
	MessageChain MessageChain `json:"messageChain"`
}

func (f FriendSyncMessage) EventType() string { return f.Type }

type GroupSyncMessage struct {
	Type    string `json:"type"`
	Subject struct {
		ID         int    `json:"id"`
		Name       string `json:"name"`
		Permission string `json:"permission"`
	} `json:"subject"`
	MessageChain MessageChain `json:"messageChain"`
}

func (g GroupSyncMessage) EventType() string { return g.Type }

type TempSyncMessage struct {
	Type    string `json:"type"`
	Subject struct {
		ID                 int    `json:"id"`
		MemberName         string `json:"memberName"`
		SpecialTitle       string `json:"specialTitle"`
		Permission         string `json:"permission"`
		JoinTimestamp      int    `json:"joinTimestamp"`
		LastSpeakTimestamp int    `json:"lastSpeakTimestamp"`
		MuteTimeRemaining  int    `json:"muteTimeRemaining"`
		Group              struct {
			ID         int    `json:"id"`
			Name       string `json:"name"`
			Permission string `json:"permission"`
		} `json:"group"`
	} `json:"subject"`
	MessageChain MessageChain `json:"messageChain"`
}

func (t TempSyncMessage) EventType() string { return t.Type }

type StrangerSyncMessage struct {
	Type    string `json:"type"`
	Subject struct {
		ID       int    `json:"id"`
		Nickname string `json:"nickname"`
		Remark   string `json:"remark"`
	} `json:"subject"`
	MessageChain MessageChain `json:"messageChain"`
}

func (s StrangerSyncMessage) EventType() string { return s.Type }

/* Message Component Types */

type MessageComponent interface {
	ComponentType() string
}

type Source struct {
	Type string `json:"type"`
	ID   int    `json:"id"`
	Time int    `json:"time"`
}

func (s Source) ComponentType() string { return s.Type }

type Quote struct {
	Type     string       `json:"type"`
	ID       int          `json:"id"`
	GroupID  int          `json:"groupId"`
	SenderID int          `json:"senderId"`
	TargetID int64        `json:"targetId"`
	Origin   MessageChain `json:"origin"`
}

func (q Quote) ComponentType() string { return q.Type }

type At struct {
	Type    string `json:"type"`
	Target  int    `json:"target"`
	Display string `json:"display"`
}

func (a At) ComponentType() string { return a.Type }

type AtAll struct {
	Type string `json:"type"`
}

func (a AtAll) ComponentType() string { return a.Type }

type Face struct {
	Type      string `json:"type"`
	FaceID    int    `json:"faceId"`
	Name      string `json:"name"`
	SuperFace bool   `json:"superFace"`
}

func (f Face) ComponentType() string { return f.Type }

type Plain struct {
	Type string `json:"type"`
	Text string `json:"text"`
}

func (p Plain) ComponentType() string { return p.Type }

type Image struct {
	Type      string      `json:"type"`
	ImageID   string      `json:"imageId"`
	Url       string      `json:"url"`
	Path      interface{} `json:"path"`
	Base64    interface{} `json:"base64"`
	Width     int         `json:"width"`
	Height    int         `json:"height"`
	Size      int         `json:"size"`
	ImageType string      `json:"imageType"`
	IsEmoji   bool        `json:"isEmoji"`
}

func (i Image) ComponentType() string { return i.Type }

type FlashImage struct {
	Type      string      `json:"type"`
	ImageID   string      `json:"imageId"`
	Url       string      `json:"url"`
	Path      interface{} `json:"path"`
	Base64    interface{} `json:"base64"`
	Width     int         `json:"width"`
	Height    int         `json:"height"`
	Size      int         `json:"size"`
	ImageType string      `json:"imageType"`
	IsEmoji   bool        `json:"isEmoji"`
}

func (f FlashImage) ComponentType() string { return f.Type }

type Voice struct {
	Type    string      `json:"type"`
	VoiceID string      `json:"voiceId"`
	Url     string      `json:"url"`
	Path    interface{} `json:"path"`
	Base64  interface{} `json:"base64"`
	Length  int         `json:"length"`
}

func (v Voice) ComponentType() string { return v.Type }

type XML struct {
	Type string `json:"type"`
	Xml  string `json:"xml"`
}

func (x XML) ComponentType() string { return x.Type }

type JSON struct {
	Type string `json:"type"`
	Json string `json:"json"`
}

func (j JSON) ComponentType() string { return j.Type }

type APP struct {
	Type    string `json:"type"`
	Content string `json:"content"`
}

func (a APP) ComponentType() string { return a.Type }

type Poke struct {
	Type string `json:"type"`
	Name string `json:"name"`
}

func (p Poke) ComponentType() string { return p.Type }

type Dice struct {
	Type  string `json:"type"`
	Value int    `json:"value"`
}

func (d Dice) ComponentType() string { return d.Type }

type MarketFace struct {
	Type string `json:"type"`
	ID   int    `json:"id"`
	Name string `json:"name"`
}

func (m MarketFace) ComponentType() string { return m.Type }

type MusicShare struct {
	Type       string `json:"type"`
	Kind       string `json:"kind"`
	Title      string `json:"title"`
	Summary    string `json:"summary"`
	JumpUrl    string `json:"jumpUrl"`
	PictureUrl string `json:"pictureUrl"`
	MusicUrl   string `json:"musicUrl"`
	Brief      string `json:"brief"`
}

func (m MusicShare) ComponentType() string { return m.Type }

type ForwardMessage struct {
	Type    string `json:"type"`
	Display struct {
		Title   string   `json:"title"`
		Brief   string   `json:"brief"`
		Source  string   `json:"source"`
		Preview []string `json:"preview"`
		Summary string   `json:"summary"`
	} `json:"display"`
	NodeList []struct {
		SenderID     int          `json:"senderId"`
		Time         int          `json:"time"`
		SenderName   string       `json:"senderName"`
		MessageChain MessageChain `json:"messageChain"`
		MessageID    int          `json:"messageId"`
		MessageRef   struct {
			MessageID int `json:"messageId"`
			Target    int `json:"target"`
		} `json:"messageRef"`
	} `json:"nodeList"`
}

func (f ForwardMessage) ComponentType() string { return f.Type }

type File struct {
	Type string `json:"type"`
	ID   string `json:"id"`
	Name string `json:"name"`
	Size int    `json:"size"`
}

func (f File) ComponentType() string { return f.Type }

type ShortVideo struct {
	Type         string      `json:"type"`
	VideoId      string      `json:"videoId"`
	FileMd5      string      `json:"fileMd5"`
	FileSize     int         `json:"fileSize"`
	FileFormat   string      `json:"fileFormat"`
	Filename     string      `json:"filename"`
	VideoUrl     string      `json:"videoUrl"`
	ThumbnailUrl interface{} `json:"thumbnailUrl"`
}

func (s ShortVideo) ComponentType() string { return s.Type }

type MiraiCode struct {
	Type string `json:"type"`
	Code string `json:"code"`
}

func (m MiraiCode) ComponentType() string { return m.Type }
